    //Метод, преобразующий входную строку с выражением в постфиксную запись
    private String GetExpression(char[] input){
        StringBuilder output = new StringBuilder();     //Строка для хранения выражения
        Stack<Character> operStack = new Stack<Character>(); //Стек для хранения операторов

        for (int i = 0; i < input.length; i++)  {           //Для каждого символа в входной строке
            //Разделители пропускаем
            if (IsDelimeter(input[i])) continue;            //Переходим к следующему символу

            //Если символ - цифра, то считываем все число
            if (Character.isDigit(input[i])) { //Если цифра
                //Читаем до разделителя или оператора, что бы получить число
                while (!IsDelimeter(input[i]) && !IsOperator(input[i])) {
                    output.append(input[i]);                //Добавляем каждую цифру числа к нашей строке
                    i++;                                    //Переходим к следующему символу

                    if (i == input.length) break;           //Если символ - последний, то выходим из цикла
                }

                output.append(" ");                         //Дописываем после числа пробел в строку с выражением
                i--;                                        //Возвращаемся на один символ назад, к символу перед разделителем
            }

            //Если символ - оператор
            if (IsOperator(input[i])) {                     //Если оператор
                if (input[i] == '(')                        //Если символ - открывающая скобка
                    operStack.push(input[i]);               //Записываем её в стек

                else if (input[i] == ')') {                 //Если символ - закрывающая скобка
                    //Выписываем все операторы до открывающей скобки в строку
                    char s = operStack.pop();

                    while (s != '(') {
                        output.append(s);
                        output.append(' ');
                        s = operStack.pop();
                    }
                }
                else {                                      //Если любой другой оператор
                    if (operStack.size() > 0)               //Если в стеке есть элементы
                        //И если приоритет нашего оператора меньше или равен приоритету оператора на вершине стека
                        if (GetPriority(input[i]) <= GetPriority(operStack.peek())) {
                            //То добавляем последний оператор из стека в строку с выражением
                            output.append(operStack.pop());
                            output.append(' ');
                        }

                    operStack.push(input[i]);               //!!!!!!!!Если стек пуст, или же приоритет оператора выше - добавляем операторов на вершину стека
                }
            }
        }

        //Когда прошли по всем символам, выкидываем из стека все оставшиеся там операторы в строку
        while (operStack.size() > 0){
            output.append(operStack.pop());
            output.append(' ');
        }

        Log.d("out GetExpression: ", output.toString());
        return output.toString(); //Возвращаем выражение в постфиксной записи
    }


    //Метод возвращает приоритет оператора
    private byte GetPriority(char s) {
        switch (s) {
            case '(': return 0;
            case ')': return 1;
            case '+': return 2;
            case '-': return 3;
            case '*': return 4;
            case '/': return 4;
            case '^': return 5;
            default: return 6;
        }
    }
